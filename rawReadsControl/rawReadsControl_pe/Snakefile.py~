# coding: utf-8
## Workflow quality control for fastq file generated by pair-end sequencing

import os
import re

NUMRUN = os.environ.get("RUN")
FASTQDIR = os.environ.get("FASTQDIR")
WDIR = os.environ.get("WDIR","10 20")
ANALYSIS = os.environ.get("ANALYSIS", "10 20")
IDRUN = os.environ.get("IDRUN", "10 20")

#run = "Run_158_NS500-065_02.11.2016_JPM_BSoS"
#WDIR = "/gpfs/tgml/herault/qualityControl/"+run

print(""+FASTQDIR+"/")




workdir: WDIR + "/" + IDRUN

sampleID1=os.listdir(""+FASTQDIR+"/")
sampleID=[i for i in sampleID1 if os.path.isdir(FASTQDIR+"/"+i)]
read = ["R1","R2"]

print(sampleID)

rule r6_writeCsvPerSamples:
    """
    Write csv table with principal qualitymetrics per fastq files
    """
    input: fastqc=expand("result/fastqc/{sample}/", sample = sampleID), 
           multiqc="result/general_report/multiqc/",
           python="/gpfs/tgml/herault/bin/miniconda3/bin/python3.5",
           pythonScript="/gpfs/tgml/herault/bin/rawReadsControl/Scripts/writeTablePerRun.py"
    output: "result/general_report/qualityMetrics.csv"
    shell: """{input.python} {input.pythonScript} . """ 
    
    

rule r5_multiqc:
    """
    Create html report using multiqc
    """
    input: expand("result/fastqc/{sample}/", sample = sampleID), expand("result/fastq_screen/{sample}/", sample = sampleID)
    output: report="result/general_report/multiqc/"
    threads: 1
    params: run = NUMRUN, analysis = ANALYSIS
    shell:"""multiqc -s -b " {params.run} sequenceur Illumina NS500, application : {params.analysis}" --outdir {output.report} -c /gpfs/tgml/herault/qualityControl/config/.multiqc_config.yaml  result/
    """


rule r1_merge_gz:
    input: FASTQDIR+"/{sample}/"
    output: fastq_gz_R1 ="data/fastq/{sample}_R1_001.fastq.gz", fastq_gz_R2 ="data/fastq/{sample}_R2_001.fastq.gz"
    threads: 1
    shell:"""
    cat {input}*L0*R1*.gz > {output.fastq_gz_R1};cat {input}*L0*R2*.gz > {output.fastq_gz_R2}
    """

rule r2_gunzip:
    input: expand("data/fastq/{{sample}}_{r}_001.fastq.gz", r = read)
    output: "data/fastq/{sample}_{r}_001.fastq"
    threads: 1
    shell:"""
    gunzip --stdout {input} > {output}
    """

rule r3_fastQC:
    """
    Run FastQC v0.11.5 control analysis on fastq.
    """
    input:
        fastq=expand("data/fastq/{{sample}}_{r}_001.fastq.gz", r = read)
    output: report="result/fastqc/{sample}/"
    threads: 1
    shell:"""
    fastqc --quiet --outdir {output.report} -f fastq {input.fastq}
    """

rule r4_fastqScreen:
    """ 
    Run fastq_screen_v0.5.1 on fastq
    """
    input:
        fastq=expand("data/fastq/{{sample}}_{r}_001.fastq.gz", r = read),
	fastq_screen="/gpfs/tgml/apps/fastq_screen_v0.5.1/fastq_screen"
    output: report="result/fastq_screen/{sample}/"  
    threads: 4
    shell:"""
    {input.fastq_screen} --bowtie2 "--local" --subset 100000 --outdir {output} --aligner bowtie2 {input.fastq}
    """
        	


